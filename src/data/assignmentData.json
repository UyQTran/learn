[
  {
    "id": "intro",
    "nextId": "coding",
    "title": "Mitt f칮rste program",
    "description": "Velkommen til progg.it! Her kan du kode i et programmeringsspr친k som heter Python. P친 denne siden ser du to hvite bokser. Den 칮verste er editoren din, mens boksen under er output-feltet. Output-feltet er boksen som skriver ut resultatet av koden i editoren n친r du trykker p친 kj칮reknappen. P친 eksempelet, ser du et funksjonskall i editoren der en funksjon print, som skriver ut strengen 'Hei verden!' til output-feltet. Pr칮v deg frem ved 친 trykke p친 kj칮reknappen.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "print('Hei verden!')",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "coding",
    "nextId": "variables",
    "title": "Koding",
    "description": "Kode er det samme som en oppskrift som maskinene v친re f칮lger bastant. Det betyr at maskinen din skriver ut n칮yaktig hva som er mellom ' tegnene i funksjonskallet for print. Erstatt progg.it med ditt eget navn s친 vil du f친r en hilsen fra din egen maskin.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "print('Hei mitt navn er progg.it')",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "variables",
    "nextId": "variables-string",
    "title": "Variabler av tall",
    "description": "I matematikken l칝rer vi om ligninger med ukjente variabler der v친r oppgave som oftest er 친 finne ut hva variabelen er lik. Dette fungerer litt annerledes i programmering hvor vi er sjefen. Vi bestemmer hva variabelen skal v칝re lik. I editoren s친 ser du en variabel x som vi har satt lik 3. Pr칮v 친 bytt ut 3 med ditt favorittall og trykk p친 kj칮r",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Funksjonen print kan ta hvilke som helst variabler og printer fortsatt ut som om vi hadde byttet ut variabelen med verdien."
    },
    "initialCode": "x = 3\nprint(x)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "variables-string",
    "nextId": "variables-error",
    "title": "Variabler av strenger",
    "description": "Variabler kan ikke bare v칝re tall, men tekststrenger ogs친. Variabler kan ogs친 hete nesten hva som helst s친 lenge variabelnavnet begynner med en bokstav. Trykk p친 kj칮r og se resultatet.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "var1 = 'Jeg heter var1 og er en variabel'\nprint(var1)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "variables-error",
    "nextId": "expressions",
    "title": "Feil variabelnavn?",
    "description": "Variabler kan hete nesten hva som helst. Nesten...",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "P친 output-feltet, ser du v친r f칮rste feilmelding! Den forklarer at kildekoden v친r inneholder s친kalt 'bad input' og hvilket linjenummer feilen f칮rst forekommer. Alts친 variabelnavn kan ikke starte med et tall."
    },
    "initialCode": "1var = 'Jeg heter 1var og er en variabel'\nprint(1var)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "expressions",
    "nextId": "code-error",
    "title": "Uttrykk",
    "description": "I editoren ser du et eksempel med to variabler x og y med en linje for 친 printe summen av disse variablene. Pr칮v deg frem med 친 trykke p친 kj칮reknappen!",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "x = 50\ny = 30\nprint(x + y)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "code-error",
    "nextId": "functions",
    "title": "Feil i kildekoden",
    "description": "Her mangler det noe. Kanskje det g친r av likevel?",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Imotsetning til oss mennesker, s친 m친 maskinene vi jobber med, ta alt med teskje. Det betyr at alle paranteser av alle typer m친 ha en start og sluttparantes. Alle kvotteringstegn som '' og \"\" m친 avsluttes. Feilmeldingen i output-feltet forklarer at dette er en syntaksfeil. Det betyr at det er en feil i kildekoden som ikke f칮lger reglene i Python. Litt som en skrivefeil."
    },
    "initialCode": "print('Hei verden!'",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "functions",
    "nextId": "functions-square-root",
    "title": "Funksjoner",
    "description": "En funksjon i Python starter med navnet til funksjonen med to paranteser. Mellom parantesene, kan man gi funksjonen argumenter. Et argument kan for eksempel v칝re tall eller strenger. Om en gitt funksjon, tar imot flere enn et argument, blir de skilt fra hverandre med komma. I editoren, ser du et eksempel p친 bruken av funksjonen len(). Trykk p친 kj칮r s친 ser vi hva som skjer!",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "I tillegg til navn og argumenter er noe som heter returverdi en del av anatomien til en funksjon. Returverdien er den verdien funksjonen gir oss tilbake og som vi kan sette lik en variabel. Funksjonen len() kan ta imot en streng som argument og returnerer lengden av strengen som returverdi."
    },
    "initialCode": "variabel = len('progg.it')\nprint(variabel)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "functions-square-root",
    "nextId": "functions-square-root-error",
    "title": "Kvadratroten",
    "description": "Python er et utrolig sterkt spr친k med masse biblioteker som gj칮r koding mye enklere for oss. F칮r vi bruker et bibliotek s친 m친 vi importere biblioteket som du ser i linje 1 i editoren. Biblioteket math, er et bibliotek med masse matematiske funksjoner. I editoren s친 ser du bruken av math sin funksjon for 친 regne ut kvadratroten av et tall eller variabel som er mellom parantesene. Skriv et program som skriver ut kvadratroten av 36.",
    "postDescription": {
      "shouldShowIfSolved": true,
      "text": "I dette eksempelet s친 er math et bibliotek, sqrt() en funksjon av math og x et argument til math.sqrt(). Biblioteker i programmeringsverdenen er litt som en verkt칮ykasse. De inneholder funksjoner som andre har skrevet. Da slipper vi 친 finne opp verkt칮yene p친 nytt fordi andre har gjort det f칮r oss 驕쥞잺"
    },
    "initialCode": "import math\nx = 16\nsqrtX = math.sqrt(x)\nprint(sqrtX)",
    "solution": {
      "solved": "6",
      "code": "import math\nx = 36\nsqrtX = math.sqrt(x)\nprint('Kvadratroten til 36 er lik')\nprint(sqrtX)"
    }
  },
  {
    "id": "functions-square-root-error",
    "nextId": "functions-square-root-error-string",
    "title": "Feil med funksjoner",
    "description": "Ok, s친 vi m친 gi funksjonen math.sqrt() et tall for at den skal fungere. Men hva skjer om vi gir funskjonen mer enn ett tall?",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Output-feltet gir oss en feilmelding om at funksjonen math.sqrt() tar n칮yaktig et argument. Derfor s친 vet ikke funksjonen hva den skal gj칮re med s친 mange tall og gir oss en feilmelding slik at vi kan rette p친 kildekoden."
    },
    "initialCode": "import math\nx = 16\nsqrtX = math.sqrt(2,1,51)\nprint(sqrtX)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "functions-square-root-error-string",
    "nextId": "pythagoras",
    "title": "Hva om vi sender inn en streng?",
    "description": "S친 feilmeldingen fortalte oss at math.sqrt() tar n칮yaktig et argument. Men betyr det ogs친 strenger? Hvordan regner man ut kvadratroten av 'progg.it'?",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "N친 fikk vi en helt annen feilmelding! Denne forteller oss at math.sqrt() kun tar imot tall som argument. For en kresen funksjon 游땨"
    },
    "initialCode": "import math\nsqrtX = math.sqrt('progg.it')\nprint(sqrtX)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "pythagoras",
    "nextId": "lists",
    "title": "Pytagoras",
    "description": "Pytagoras sin l칝resetning handler om at summen av arealene til katetene i en rettvinklet trekant er lik arealet til hypotenusen. Skriv et program som regner og skriver ut hypotenusen til en trekant der katetene er lik 5 og 12.",
    "postDescription": {
      "shouldShowIfSolved": true,
      "text": "Woho! Veldig bra jobbet! Hittil, har du l칝rt om variabler, tall og funksjonen sqrt i mattebiblioteket. Kun med denne kunnskapen s친 har du klart 친 lage en kalkulator for 친 regne ut hypotenusen til en rettvinklet trekant. Men det er s친 mye mer 친 l칝re om programmering og Python. Bare fortsett s친nn 游땕"
    },
    "initialCode": "",
    "solution": {
    "solved": "13",
      "code": "import math\nkat1 = 5\nkat2 = 12\nhyp = math.sqrt(kat1*kat1+kat2*kat2)\nprint('Hypotenusen til en rettvinklet trekant med kateter 5 og 12 er lik')\nprint(hyp)"
    }
  },
  {
    "id": "lists",
    "nextId": "lists-elements",
    "title": "Lister",
    "description": "En liste i Python er definert med klammeparanteser []. Inneholdet i listen heter elementer som er skilt fra hverandre med kommategn. Akkurat som tekststrenger og tall s친 kan ogs친 lister v칝re variabler som vist p친 eksempelet i editoren. Trykk p친 kj칮reknappen for 친 se hva som blir skrevet ut p친 terminalen.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "liste = [67,31,53,6,97,1]\nprint(liste)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "lists-elements",
    "nextId": "lists-error",
    "title": "Elementer i lister",
    "description": "Noen ganger, vil vi kun skrive ut noen elementer i listen. Tenk p친 en liste som en bok. En bok er jo egentlig en liste av ark. Ganske ofte n친r vi leser fagb칮ker s친 blir vi n칮dt til 친 sl친 opp ting ved 친 lete etter sidenummeret. Indeks i en liste tilsvarer det vi ville ha kalt sidenummeret i en bok. Alts친 et tall som beskriver hvor et element ligger i en liste. I editoren, ser du et eksempel der vi printer ut elementene p친 plass 4 og 2 i listen. Kan du gjette hvilke tall som blir skrevet ut?",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text":"Gjettet du kanskje at nummer 6 og 31 skulle bli printet ut? Grunnen til at det heller ble 97 og 53 er fordi maskinene v친re rett og slett begynner 친 telle fra 0. Pr칮v 친 se hva som skjer om du pr칮ver 친 printe ut indeks nummer 0 fra liste variablen."
    },
    "initialCode": "liste = [67,31,53,6,97,1]\nprint(liste[4])\nprint(liste[2])",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "lists-error",
    "nextId": "functions-range",
    "title": "Liste error",
    "description": "Hva med indeks h칮yere enn st칮rrelsen til listen?",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Akkurat som om vi skulle bla til side 100 i en bok med kun 2 sider s친 vil ikke dette g친. Feilmeldingen forklarer at indeksen v친r er 'out of range' som betyr at den er utenfor grensen til listen. Alts친 vi pr칮ver 친 hente et element med en indeks som ikke finnes i listen. I tillegg s친 gir feilmeldingen beskjed om hvilken linjenummer i kildekoden v친r, feilen forekommer. Veldig nyttig!"
    },
    "initialCode": "liste = [3,14]\nprint(liste[100])",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "functions-range",
    "nextId": "loops",
    "title": "Funksjonen range",
    "description": "Denne funksjonen tar inn to tall og spytter ut en liste med tall fra det f칮rste gitte tallet frem til, men ikke inkludert det andre gitte tallet. I editoren, ser du et eksempel hvor vi kaller p친 range med tall 0 og 10.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Vi kan aksessere range verdien som en liste og bruke klammeparantesene []. I dette tilfellet skulle vi printe plass nummer 3 i listen."
    },
    "initialCode": "liste = range(0,10)\nprint(liste[3])",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "loops",
    "nextId": "indents",
    "title": "L칮kker",
    "description": "Datamaskinen er utrolig flink til 친 gj칮re en ting mange ganger og gi oss kjappe resultater. Tenk deg om vi fikk i oppgave om 친 telle til 100. Det tar litt tid for oss mennesker 친 ramse opp alle tallene. Ordet 'for' er et n칮kkelord i Python som sier til datamaskinen at vi har et stykke kode som vi vil kj칮re flere ganger. I editoren, ser du et eksempel p친 hvordan en l칮kke er skrevet i Python hvor print funksjonen blir kalt 25 ganger og printer ut alle tallene fra 25 frem til, men ikke inkludert 50. Endre p친 l칮kken slik at print skriver ut alle tall fra 0 frem til, men ikke inkludert 100.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "for i in range(25,50):\n\tprint(i)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "indents",
    "nextId": "string-concat",
    "title": "Hva er indentering?",
    "description": "Indentering er rett og slett fire mellomrom eller en tab med tab-knappen p친 tasturet som forteller maskinen at hvilken del av kildekoden tilh칮rer en annen del av koden. Fjern alle mellomrommene f칮r print. Hva skjer om vi har feil indentering i denne l칮kken?",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Da f친r vi en feilmelding som forteller oss at maskinen ikke skj칮nner hvor variabel 'i' kommer fra i linje 2. Dette er fordi variabelen 'i' kun kan brukes i kode som tilh칮rer l칮kken v친r."
    },
    "initialCode": "for i in range(25,50):\n\tprint(i)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "string-concat",
    "nextId": "user-input",
    "title": "Strengkonkatenering",
    "description": "Ofte n친r vi skriver programmer, kan det v칝re lurt 친 lagre strenger i flere enn en variabel. I editoren, ser du et eksempel p친 hvordan vi kan sl친 sammen to strengvariabler. Kalt konkatenering",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Strengkonkatenering er uttrykk bare for tekststrenger akkurat som tall har egne uttrykk med pluss og minus. Vi bruker operatoren + for 친 sl친 sammen tekststrenger."
    },
    "initialCode": "melding = 'Hei! Mitt navn er '\nnavn = 'progg.it'\nprint(melding + navn)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "user-input",
    "nextId": "conversion-string-int",
    "title": "Brukerinput",
    "description": "N친r vi bruker programmer p친 maskinene v친re, trenger de ofte input fra oss som brukere fra tastaturet. I Python, gj칮res dette med funksjonen input() som vist i eksempelet i editoren. Kj칮r programmet og skriv inn ditt eget navn.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": "Det poppet plutselig opp en alarmboks p친 nettleseren v친r med et input-felt der vi kunne skrive navnet v친rt. Det skal sies at dette skjer kun i progg.it fordi jeg er en nettside. Om du kj칮rer Python p친 andre m친ter, kan det hende at brukerinput blir hentet p친 andre m친ter."
    },
    "initialCode": "navn = input()\nprint('Hei! Mitt navn er ' + navn)",
    "solution": {
      "solved": "",
      "code": ""
    }
  },
  {
    "id": "conversion-string-int",
    "nextId": "conversion-int-string",
    "title": "Typekonvertering fra streng til tall",
    "description": "N친 har vi kommet langt! Vi har n친 l칝rt om to prim칝rtyper i Python, tall og strenger. Noen ganger vil vi kanskje bytte typer p친 disse. Som for eksempel s친 vil brukerinput alltid spytte ut en streng fra tastaturet. Om vi skriver inn tall i tastaturet s친 vil vi kunne bruke dette tallet til 친 regne ut ting. Bruk funksjonen int() for 친 konvertere tallet vi tar inn i input(). Funksjonen int() tar imot n칮yaktig et argument som m친 v칝re en streng.",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "tall = input()\nprint(5 + tall)",
    "solution": {
      "solved": "",
      "code": "tall = int(input())\nprint(5 + tall)"
    }
  },
  {
    "id": "conversion-int-string",
    "nextId": "hypothenus-calculator",
    "title": "Typekonvertering fra tall til streng",
    "description": "Eller kanskje vi vil konkatenere et tall inn til en streng? Da bruker vi funksjonen str()",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "print('Mitt favorittall er ' + 7)",
    "solution": {
      "solved": "7",
      "code": "print('Mitt favorittall er ' + str(7))"
    }
  },
  {
    "id": "hypothenus-calculator",
    "nextId": "",
    "title": "Hypotenuskalkulator",
    "description": "N친 har du l칝rt deg hvordan du regner ut Pytagoras l칝resetning og hvordan vi kan f친 input fra bruker gjennom tastaturet. La oss kombinere den kunnskapen vi har oppl칝rt oss til 친 lage en kalkulator for 친 regne ut hypotenusen av en rettvinklet trekant. Kalkulatoren skal ta imot to brukerinput f칮rste katet og andre katet. Programmet skal s친 regne ut hypotenusen. Til slutt, skal programmet printe ut hva brukeren skrev inn som katateter og verdien av den beregnede hypotenusen",
    "postDescription": {
      "shouldShowIfSolved": false,
      "text": ""
    },
    "initialCode": "",
    "solution": {
      "solved": "",
      "code": "import math\nkat1 = int(input())\nkat2 = int(input())\nhyp = math.sqrt(kat1*kat1+kat2*kat2)\nprint('Hypotenusen til en rettvinklet trekant med kateter ' + str(kat1) + ' og ' + str(kat2) + ' er lik ' + str(hyp))"
    }
  }
]
